// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`New Timer screen matches snapshot 1`] = `
<View>
  <View
    style={
      Object {
        "borderBottomColor": "#37c172",
        "borderBottomWidth": 1,
        "color": "#37c172",
      }
    }
  >
    <TextInput
      autoFocus={false}
      keyboardType="default"
      onBlur={[Function]}
      onChangeText={[Function]}
      onFocus={[Function]}
    />
  </View>
  <View>
    <RCTInputAccessoryView
      backgroundColor="#f1f3f5"
      style={
        Array [
          undefined,
          Object {
            "position": "absolute",
          },
        ]
      }
    >
      <Text
        accessibilityLabel="Done"
        onPress={[Function]}
        style={
          Object {
            "color": "#3183c8",
            "padding": 10,
            "textAlign": "right",
          }
        }
      >
        Done
      </Text>
    </RCTInputAccessoryView>
    <View
      style={
        Object {
          "borderBottomColor": undefined,
          "borderBottomWidth": 1,
        }
      }
    >
      <TextInput
        autoFocus={false}
        keyboardType="numeric"
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        placeholder="Timer Duration (HH:MM:SS)"
        value=""
      />
    </View>
  </View>
  <Text
    accessibilityLabel="Alerts"
    style={
      Object {
        "color": undefined,
        "fontSize": 24,
      }
    }
  >
    Alerts
  </Text>
  <View
    style={
      Object {
        "borderBottomColor": undefined,
        "borderBottomWidth": 1,
      }
    }
  >
    <TextInput
      autoFocus={false}
      keyboardType="default"
      onBlur={[Function]}
      onChangeText={[Function]}
      onFocus={[Function]}
      placeholder="Alert Message"
    />
  </View>
  <View>
    <RCTInputAccessoryView
      backgroundColor="#f1f3f5"
      style={
        Array [
          undefined,
          Object {
            "position": "absolute",
          },
        ]
      }
    >
      <Text
        accessibilityLabel="Done"
        onPress={[Function]}
        style={
          Object {
            "color": "#3183c8",
            "padding": 10,
            "textAlign": "right",
          }
        }
      >
        Done
      </Text>
    </RCTInputAccessoryView>
    <View
      style={
        Object {
          "borderBottomColor": undefined,
          "borderBottomWidth": 1,
        }
      }
    >
      <TextInput
        autoFocus={false}
        keyboardType="numeric"
        onBlur={[Function]}
        onChangeText={[Function]}
        onFocus={[Function]}
        placeholder="Alert Time (HH:MM:SS)"
        value=""
      />
    </View>
  </View>
  <View
    accessible={true}
    isTVSelectable={true}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#37c172",
        "borderColor": "#e9ecee",
        "borderRadius": 100,
        "borderWidth": 1,
        "height": 50,
        "justifyContent": "center",
        "opacity": 1,
        "padding": 10,
        "width": 50,
      }
    }
  >
    <Text
      accessibilityLabel="+"
      style={
        Object {
          "color": undefined,
          "fontSize": undefined,
        }
      }
    >
      +
    </Text>
  </View>
</View>
`;

exports[`Timer screen editing mode returns a FlatList of alert inputs 1`] = `
Array [
  <Swipable
    swipeLeftComponent={
      <Button
        danger={true}
        value="Delete"
      />
    }
  >
    <View>
      <TextInput
        keyboardType="default"
        onChange={[MockFunction]}
        value="Add bittering hops"
      />
      <TimerInput
        value={3600000}
      />
    </View>
  </Swipable>,
  <Swipable
    swipeLeftComponent={
      <Button
        danger={true}
        value="Delete"
      />
    }
  >
    <View>
      <TextInput
        keyboardType="default"
        onChange={[MockFunction]}
        value="Sanitize chiller"
      />
      <TimerInput
        value={300000}
      />
    </View>
  </Swipable>,
  <Swipable
    swipeLeftComponent={
      <Button
        danger={true}
        value="Delete"
      />
    }
  >
    <View>
      <TextInput
        keyboardType="default"
        onChange={[MockFunction]}
        value="Add whirlpool hops"
      />
      <TimerInput
        value={0}
      />
    </View>
  </Swipable>,
]
`;

exports[`Timer screen returns a FlatList of alerts 1`] = `
Array [
  <React.Fragment>
    <Text>
      Add bittering hops
    </Text>
    <Clock
      ms={3600000}
      size="md"
    />
  </React.Fragment>,
  <React.Fragment>
    <Text>
      Sanitize chiller
    </Text>
    <Clock
      ms={300000}
      size="md"
    />
  </React.Fragment>,
  <React.Fragment>
    <Text>
      Add whirlpool hops
    </Text>
    <Clock
      ms={0}
      size="md"
    />
  </React.Fragment>,
]
`;

exports[`Timers screen should format the card correctly 1`] = `
Array [
  <Card
    lowerLeft={
      <Clock
        ms={25000}
        size="sm"
      />
    }
    lowerRight={
      <Text
        value="2 alerts"
      />
    }
    upperLeft={
      <Subtitle
        value="Timer 1"
      />
    }
  />,
  <Card
    lowerLeft={
      <Clock
        ms={129999}
        size="sm"
      />
    }
    lowerRight={
      <Text
        value="3 alerts"
      />
    }
    upperLeft={
      <Subtitle
        value="Timer 2"
      />
    }
  />,
]
`;
